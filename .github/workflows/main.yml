name: Main Deployment

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - khem/cicd-integration

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  REGISTRY_HOST: https://asia.gcr.io
  PROJECT_ID: incomi
  REGISTRY_URL: asia.gcr.io/incomi

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  # test:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Run tests
  #       run: |
  #         if [ -f docker-compose.test.yml ]; then
  #           docker-compose --file docker-compose.test.yml build
  #           docker-compose --file docker-compose.test.yml run sut
  #         else
  #           docker build . --file Dockerfile
  #         fi

  deploy_front:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2
      
      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      
      - run: python -c 'print("Hello")'

      - uses: actions/setup-node@v1
        with:
          node-version: '12'

      - name: Build frontend as static HTML files using nuxt generate
        working-directory: ./nuxt/src/app
        run: |
          yarn install
          yarn run generate
      
      - name: Deploy frontend to Firebase
        uses: w9jds/firebase-action@v1.5.0
        with:
          args: deploy --only hosting
          name: incomi
          path: dist
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          PROJECT_PATH: ./nuxt/src/app

  deploy_back:
    # Ensure test job passes before pushing image.
    # needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2
      
      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      
      - run: python -c 'print("Hello")'

      - name: Log into Google Container Registry
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '290.0.1'
          project_id: incomi
          service_account_key: ${{ secrets.GCR_JSON }}
          export_default_credentials: true
      - run: | 
          gcloud info

      - name: Build images
        run: |
          echo ::set-env name=REGISTRY_URL::$(echo $REGISTRY_URL)
          gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin $REGISTRY_HOST
          docker-compose -f docker-compose-prod.yml build 

      - name: Push image to Google Container Registry
        run: docker-compose -f docker-compose-prod.yml push
      
      - name: Log in to the virtual machine on GCP
        uses: appleboy/ssh-action@master
        with: 
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: |
            whoami
            ls -al

          